//// BaseProject parameters

// multithreading parameters
uint32 Platform::Multithreading::secondaryThreadsCount = 8; // not used at the moment

// window & rendering parameters
bool Platform::createWindow = false; // enable this to see whether you loaded the correct input data correctly
string Platform::windowTitle = TSR;

uint32 Platform::width = 1600;
uint32 Platform::height = 800;
bool Platform::fullscreen = false;

uint32 Platform::depthBitPerPixel = 32;
uint32 Platform::stencilBitsPerPixel = 0;
uint32 Platform::maxFrameRateHz = 60;

Real Platform::timePeriodPerFPSMeasurement = 3.0;


//// surface reconstruction parameters

// FSSF (mesh refinement)
Real FSSF::edgeMergeRelativeThreshold = 0.25; // paper, table 2: t_{n, \text{min}}

Real FSSF::spikyGeometryAngleThreshold = 60; // paper, table 2: t_\beta
Real FSSF::spikyGeometryRelativeScaleThreshold = 1.5; // new threshold for configuring finding of spiky outlier geometry by means of increased triangle sizes, Alg 1, line 18 (in paper: more than doubled edge lengths)

Real FSSF::subdivisionRelativeErrorThreshold = 1.0; // not used at the moment
Real FSSF::subdivisionRelativeScaleMinimum = 0.5; // not used at the moment

// FSSF projection confidence parameters
Real FSSF::ProjectionConfidence::distanceBandwidth = 3.0; // controls sigma_d in table 2 of the paper: sigma_d = distanceBandwidth * sample scale / 3.0f (support range = distanceBandwidth * scale)
Real FSSF::ProjectionConfidence::maxDegreesDifference = 75.0; // controls sigma_\alpha in table 2 of the paper, sigma_\alpha = maxDegreesDifference / 3.0f (support range = maxDegreesDifference)

Real FSSF::supportWeakThreshold = 1.0f; // paper, table 2: t_{\mathcal{S}, \text{weak}} 

Real FSSF::surfaceErrorRelativeThreshold = 2.0; // paper, Alg. 1, line 7: revert vertex update if the vertex error doubled during refinement

// FSSF smoothing parameters
Real FSSF::Smoothing::umbrellaLambdaWeaklySupported = 1.0; // paper, table2: \lambda_\text{out}
Real FSSF::Smoothing::umbrellaLambdaWellSupported = 0.1; // paper, table 2: \lambda_\text{dist}	
uint32 FSSF::Smoothing::initialIterCount = 3; // smoothing iterations after crust extraction and before refinement
uint32 FSSF::Smoothing::taubinIterCount = 25; // number of frequency-based Taubin operator iterations for mesh smoothing (each iteration the operator is applied to each vertex)

uint32 FSSF::outlierIsleMinKeepingSize = 250; // paper, table 2: t_{\mathcal{S}, isle}

// rectangular super sampling pattern for ray tracing when projecting samples onto the surface
uint32 FSSF::raysPerLinkedPairDim0 = 5; // new: first dimension resolution of super sampling pattern for ray tracing
uint32 FSSF::raysPerLinkedPairDim1 = 5; // new: second dimension resolution of super sampling pattern for ray tracing
bool FSSF::orientSamplingPattern = false; // new: set this to true to orient the rectangular sampling pattern of a view sampling pair like its view or set it to false to simply have it orthogonal to the corresponding viewing direction

// FSSFStatistics defining when to stop the refinement
Real FSSFStatistics::targetSurfaceError = 0.000001; // stop if the target error is below this
Real FSSFStatistics::targetSurfaceErrorReductionThreshold = 0.01; // no error reduction if relative error reduction is below this
uint32 FSSFStatistics::maxTimesFailedErrorReduction = 3; // stop if there is no error reduction this many times

// MeshDijkstra defining how to spread surface kernels
Real MeshDijsktra::angularCostsFactor = 0.1; // paper, table 2: Phi
Real MeshDijsktra::bandwidthFactor = 1.0; // paper, table 2: h_\mathcal{S}
Real MeshDijsktra::maxAngleDifference = 60; // paper, table 2: Gamma

// occupancy to estimate free space and space close to surfaces
Real Occupancy::bandwidthFactor = 2.0; // paper, table 2: h_\mathcal{O}
Real Occupancy::confidenceThreshold = 0.0; // paper, table 2: t_{\mathcal{C}, k}
Real Occupancy::relativeRadiusForPriors = 25.0f; // new: defines the size of the neighborhood in which the Bayesian occupancy priors are semi locally computed for the current node, relative to Octree node size
Real Occupancy::relativeSampleConeLength = 1.0f; // new: length of cut sample cone main axis = sample scale * Occupancy::bandwidthFactor * relativeSampleConeLength

// samples / general octree resolution
Real Samples::maxRelativeSamplingDistance = 1.0; // paper, table 2: h_{SVO}

// scene
uint32 Scene::minimumTriangleIsleSize = 100; // paper, table 2: t_{\mathcal{C}, isle}
